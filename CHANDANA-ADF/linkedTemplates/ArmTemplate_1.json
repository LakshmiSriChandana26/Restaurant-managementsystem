{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CHANDANA-ADF"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "COGNINE-L210"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "chandudb"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ADF_User "
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/until')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sales_data_100k.csv",
						"fileSystem": "chandana"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "PriceEach",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wranggling')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "chandana"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "PriceEach",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CI CD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sales_raw",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CICD_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "A",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ProductName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ProductName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PriceEach",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PriceEach",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "until",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText5",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "B",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "checkAB",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "A",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "B",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(activity('A').Status,'Succeeded'), equals(activity('B').Status,'Succeeded'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-22T05:52:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/until')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FOREACH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "foreach",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T11:21:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incrementalload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Increment_Input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText6",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-24T13:14:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingest_Sales_To_Synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_Sales_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SalesAmount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesAmount",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_for_ingest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "output_ingest",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-03T12:52:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UNTIL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('Fileexist'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1until",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "until",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1until",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1until').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Fileexist",
													"value": "false"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Fileexist",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.00:03:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Fileexist": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T10:28:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/until')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ProductID",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "UnitPrice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SalesAmount",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Phone",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Region",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sales_RAW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ProductID",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "UnitPrice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SalesAmount",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Phone",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Region",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sales_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					},
					{
						"name": "LastWatermark",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "WatermarkControl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "__$start_lsn",
						"type": "binary"
					},
					{
						"name": "__$end_lsn",
						"type": "binary"
					},
					{
						"name": "__$seqval",
						"type": "binary"
					},
					{
						"name": "__$operation",
						"type": "int",
						"precision": 10
					},
					{
						"name": "__$update_mask",
						"type": "varbinary"
					},
					{
						"name": "OrderID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ProductID",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "UnitPrice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SalesAmount",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Phone",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "__$command_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "cdc",
					"table": "dbo_Sales_RAW_CT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "Last_LSN",
						"type": "binary"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CDC_Control"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "__$start_lsn",
						"type": "binary"
					},
					{
						"name": "__$end_lsn",
						"type": "binary"
					},
					{
						"name": "__$seqval",
						"type": "binary"
					},
					{
						"name": "__$operation",
						"type": "int",
						"precision": 10
					},
					{
						"name": "__$update_mask",
						"type": "varbinary"
					},
					{
						"name": "OrderID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ProductID",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "UnitPrice",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SalesAmount",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Phone",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "__$command_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sales_RAW_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schema Drift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales_raw",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Schemadrift_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          ProductCategory as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          SalesAmount as string,",
						"          Phone as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          OrderDate,",
						"          ProductID,",
						"          ProductCategory,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesAmount,",
						"          Phone,",
						"          Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          ContactFirstName as string,",
						"          ContactLastName as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wrangllingdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DelimitedText2",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DelimitedText2",
							"dataset": {
								"referenceName": "input",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DelimitedText2 = let AdfDoc = AzureStorage.DataLakeContents(\"https://chandanasa.dfs.core.windows.net/chandana/sales_data_100k.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"DelimitedText2\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as short,",
						"          OrderDate as date,",
						"          CustomerName as string,",
						"          ProductName as string,",
						"          Quantity as short,",
						"          PriceEach as double,",
						"          Total as double,",
						"          Country as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"filter1 split(Country == 'USA',",
						"     disjoint: false) ~> split1@(USStream, UKStream)",
						"source1 filter(!isNull(Status)) ~> filter1",
						"split1@USStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sales_raw",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "transoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "saleserror",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "join1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          ProductCategory as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          SalesAmount as string,",
						"          Phone as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          ContactFirstName as string,",
						"          ContactLastName as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(SalesAmount = toDecimal(SalesAmount),",
						"          Quantity = toInteger(Quantity),",
						"          UnitPrice = toDecimal(UnitPrice),",
						"          {Mask Phone Columncolumn1} = concat(substring(Phone, 1, 3), 'XXXXXX'),",
						"          {Recalculate SalesAmount} = toDecimal(Quantity) * toDecimal(UnitPrice)) ~> derivedColumn1",
						"derivedColumn1 split(!isNull(OrderID) && !isNull(CustomerID) && !isNull(ProductID) && SalesAmount > 0,",
						"     disjoint: false) ~> split1@(validrows, errorrows)",
						"split1@validrows, source2 join(split1@validrows@CustomerID == source2@CustomerID,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 keyGenerate(output(SalesKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 aggregate(groupBy(SalesAmount),",
						"     OrderID = count(OrderID)) ~> aggregate1",
						"join1 select(mapColumn(",
						"          OrderID,",
						"          CustomerID = split1@validrows@CustomerID,",
						"          OrderDate,",
						"          ProductID,",
						"          ProductCategory,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesAmount,",
						"          Phone = split1@validrows@Phone,",
						"          Region,",
						"          {Mask Phone Columncolumn1},",
						"          {Recalculate SalesAmount},",
						"          CustomerID = source2@CustomerID,",
						"          CustomerName,",
						"          ContactFirstName,",
						"          ContactLastName,",
						"          Phone = source2@Phone,",
						"          Address,",
						"          City,",
						"          State,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          ContactFirstName as string,",
						"          ContactLastName as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"split1@errorrows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          ContactFirstName as string,",
						"          ContactLastName as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Country as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CDC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Last LSN",
						"description": "Fetches the last processed LSN (Log Sequence Number) from the CDC_Control table.This LSN is used to identify which changes in cdc.dbo_Sales_RAW_CT have already been processed, enabling incremental load.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT Last_LSN\nFROM CDC_Control\nWHERE TableName = 'Sales_RAW';\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable5",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set LastLSN",
						"description": "Stores the value returned by the Lookup activity in a pipeline variable called LastLSN.This variable will be passed to the Copy Activity to filter CDC rows",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Last LSN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastLSN",
							"value": {
								"value": "@activity('Lookup Last LSN').output.firstRow.Last_LSN\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"description": "Reads changes from the CDC table cdc.dbo_Sales_RAW_CT using the LastLSN variable to filter only new changes.Loads these rows into staging table Sales_RAW_Staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set LastLSN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "__$start_lsn",
											"type": "Byte[]",
											"physicalType": "binary"
										},
										"sink": {
											"name": "__$start_lsn",
											"type": "Byte[]",
											"physicalType": "binary"
										}
									},
									{
										"source": {
											"name": "__$end_lsn",
											"type": "Byte[]",
											"physicalType": "binary"
										},
										"sink": {
											"name": "__$end_lsn",
											"type": "Byte[]",
											"physicalType": "binary"
										}
									},
									{
										"source": {
											"name": "__$seqval",
											"type": "Byte[]",
											"physicalType": "binary"
										},
										"sink": {
											"name": "__$seqval",
											"type": "Byte[]",
											"physicalType": "binary"
										}
									},
									{
										"source": {
											"name": "__$operation",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "__$operation",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "__$update_mask",
											"type": "Byte[]",
											"physicalType": "varbinary"
										},
										"sink": {
											"name": "__$update_mask",
											"type": "Byte[]",
											"physicalType": "varbinary"
										}
									},
									{
										"source": {
											"name": "OrderID",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderID",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "Date",
											"physicalType": "date"
										},
										"sink": {
											"name": "OrderDate",
											"type": "Date",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "ProductID",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "ProductCategory",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ProductCategory",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "Quantity",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "SalesAmount",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "SalesAmount",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "Phone",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "__$command_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "__$command_id",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable4",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable6",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Script1",
						"description": "Applies the changes from the staging table to the main target table Sales_RAW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "WITH LatestChanges AS (\n    SELECT *\n    FROM (\n        SELECT *,\n               ROW_NUMBER() OVER (PARTITION BY OrderID ORDER BY __$start_lsn DESC) AS rn\n        FROM Sales_RAW_Staging\n    ) t\n    WHERE rn = 1\n)\nMERGE INTO Sales_RAW AS tgt\nUSING LatestChanges AS src\nON tgt.OrderID = src.OrderID\nWHEN MATCHED AND src.__$operation = 1 THEN DELETE\nWHEN MATCHED AND src.__$operation = 3 THEN UPDATE SET\n    tgt.CustomerID = src.CustomerID,\n    tgt.SalesAmount = src.SalesAmount,\n    tgt.OrderDate = src.OrderDate,\n    tgt.ProductID = src.ProductID,\n    tgt.ProductCategory = src.ProductCategory,\n    tgt.Quantity = src.Quantity,\n    tgt.UnitPrice = src.UnitPrice,\n    tgt.Phone = src.Phone,\n    tgt.Region = src.Region\nWHEN NOT MATCHED AND src.__$operation = 2 THEN INSERT\n    (OrderID, CustomerID, SalesAmount, OrderDate, ProductID, ProductCategory, Quantity, UnitPrice, Phone, Region)\nVALUES\n    (src.OrderID, src.CustomerID, src.SalesAmount, src.OrderDate, src.ProductID, src.ProductCategory, src.Quantity, src.UnitPrice, src.Phone, src.Region);\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script2",
						"description": "Clears all rows from Sales_RAW_Staging after the MERGE is complete.",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE Sales_RAW_Staging;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"LastLSNParam": {
						"type": "string",
						"defaultValue": "@variables('LastLSN')"
					}
				},
				"variables": {
					"LastLSN": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-25T11:10:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable5')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable4')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable6')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		}
	]
}